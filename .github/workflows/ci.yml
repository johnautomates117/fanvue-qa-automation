name: Fanvue QA Automation CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run visual regression tests nightly at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of tests to run'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - e2e
          - visual
          - performance

env:
  NODE_VERSION: '20.x'
  PLAYWRIGHT_BROWSERS_PATH: ${{ github.workspace }}/pw-browsers

jobs:
  # Job 1: Lint and Type Check
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run TypeScript type check
        run: npm run typecheck

      - name: Run ESLint
        run: npm run lint

      - name: Check code formatting
        run: npm run format -- --check

  # Job 2: E2E Tests
  e2e-tests:
    name: E2E Tests (${{ matrix.project }})
    runs-on: ubuntu-latest
    needs: code-quality
    strategy:
      fail-fast: false
      matrix:
        project: [chromium, firefox, webkit, mobile-chrome, mobile-safari]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Cache Playwright browsers
        uses: actions/cache@v4
        id: playwright-cache
        with:
          path: ${{ env.PLAYWRIGHT_BROWSERS_PATH }}
          key: ${{ runner.os }}-playwright-${{ hashFiles('**/package-lock.json') }}

      - name: Install Playwright browsers
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: npx playwright install --with-deps

      - name: Install Playwright dependencies
        if: steps.playwright-cache.outputs.cache-hit == 'true'
        run: npx playwright install-deps

      - name: Run E2E tests
        run: npm test -- --project=${{ matrix.project }}
        env:
          CI: true
          SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
          TESTRAIL_HOST: ${{ secrets.TESTRAIL_HOST }}
          TESTRAIL_USERNAME: ${{ secrets.TESTRAIL_USERNAME }}
          TESTRAIL_API_KEY: ${{ secrets.TESTRAIL_API_KEY }}
          PROJECT_ID: ${{ secrets.TESTRAIL_PROJECT_ID }}

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.project }}
          path: |
            test-results/
            playwright-report/
          retention-days: 30

      - name: Upload traces
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: traces-${{ matrix.project }}
          path: test-results/**/*.zip
          retention-days: 7

  # Job 3: Visual Regression Tests (runs on schedule or manual trigger)
  visual-tests:
    name: Visual Regression Tests
    runs-on: ubuntu-latest
    needs: code-quality
    if: |
      github.event_name == 'schedule' || 
      github.event_name == 'workflow_dispatch' && github.event.inputs.test_type != 'e2e' ||
      contains(github.event.head_commit.message, '[visual]')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Cache Playwright browsers
        uses: actions/cache@v4
        with:
          path: ${{ env.PLAYWRIGHT_BROWSERS_PATH }}
          key: ${{ runner.os }}-playwright-${{ hashFiles('**/package-lock.json') }}

      - name: Install Playwright browsers
        run: npx playwright install chromium --with-deps

      - name: Run visual regression tests
        run: npm run test:visual
        env:
          CI: true

      - name: Upload visual test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: visual-regression-results
          path: |
            visual-regression-report/
            tests/visual/screenshots/
          retention-days: 30

      - name: Comment PR with visual changes
        if: failure() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            const reportPath = path.join(process.env.GITHUB_WORKSPACE, 'visual-test-results.json');
            if (fs.existsSync(reportPath)) {
              const report = JSON.parse(fs.readFileSync(reportPath, 'utf8'));
              const failedTests = report.suites.flatMap(s => s.specs.filter(spec => spec.tests.some(t => t.status === 'failed')));
              
              if (failedTests.length > 0) {
                const comment = `## üçºÔ∏è Visual Regression Test Results
                
                ‚ùå ${failedTests.length} visual tests failed. Please review the changes.
                
                [View detailed report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
                
                To update snapshots, run: \`npm run test:visual:update\``;
                
                github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: comment
                });
              }
            }

  # Job 4: Performance Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: e2e-tests
    if: |
      github.event_name == 'push' && github.ref == 'refs/heads/main' ||
      github.event_name == 'workflow_dispatch' && github.event.inputs.test_type == 'performance'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install k6
        run: |
          sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: Run performance tests
        run: npm run k6:test
        env:
          K6_CLOUD_TOKEN: ${{ secrets.K6_CLOUD_TOKEN }}

      - name: Upload performance results
        uses: actions/upload-artifact@v4
        with:
          name: performance-results
          path: performance-results/
          retention-days: 30

  # Job 5: Test Results Processing
  process-results:
    name: Process Test Results
    runs-on: ubuntu-latest
    needs: [e2e-tests, visual-tests]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download all test results
        uses: actions/download-artifact@v4
        with:
          path: all-results/

      - name: Upload results to TestRail
        if: env.TESTRAIL_HOST != ''
        run: npm run testrail:upload
        env:
          TESTRAIL_HOST: ${{ secrets.TESTRAIL_HOST }}
          TESTRAIL_USERNAME: ${{ secrets.TESTRAIL_USERNAME }}
          TESTRAIL_API_KEY: ${{ secrets.TESTRAIL_API_KEY }}
          PROJECT_ID: ${{ secrets.TESTRAIL_PROJECT_ID }}
          RUN_NAME: "Automated Test Run - ${{ github.run_number }}"

      - name: Send metrics to Sentry
        if: env.SENTRY_DSN != ''
        run: |
          node -e "
          const Sentry = require('@sentry/node');
          Sentry.init({ dsn: process.env.SENTRY_DSN });
          
          // Send test execution metrics
          const transaction = Sentry.startTransaction({
            op: 'test.suite',
            name: 'Fanvue QA Automation'
          });
          
          Sentry.setTag('ci.run_id', '${{ github.run_id }}');
          Sentry.setTag('ci.run_number', '${{ github.run_number }}');
          Sentry.setTag('ci.event', '${{ github.event_name }}');
          
          transaction.finish();
          "
        env:
          SENTRY_DSN: ${{ secrets.SENTRY_DSN }}

      - name: Create test summary
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            let summary = '# Test Execution Summary\n\n';
            
            // Add workflow information
            summary += `**Workflow:** ${context.workflow}\n`;
            summary += `**Run:** ${context.runNumber}\n`;
            summary += `**Triggered by:** ${context.eventName}\n\n`;
            
            // Add test results if available
            const resultsPath = path.join(process.env.GITHUB_WORKSPACE, 'all-results');
            if (fs.existsSync(resultsPath)) {
              // Process results and add to summary
              summary += '## Test Results\n\n';
              summary += '| Test Suite | Status | Duration |\n';
              summary += '|------------|--------|----------|\n';
              // Add actual results processing here
            }
            
            // Write summary
            await core.summary
              .addRaw(summary)
              .write();

  # Job 6: Deploy Test Report (only on main branch)
  deploy-report:
    name: Deploy Test Report
    runs-on: ubuntu-latest
    needs: process-results
    if: github.ref == 'refs/heads/main' && always()
    steps:
      - name: Download test reports
        uses: actions/download-artifact@v4
        with:
          name: test-results-chromium
          path: reports/

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./reports/playwright-report
          destination_dir: test-reports/${{ github.run_number }}