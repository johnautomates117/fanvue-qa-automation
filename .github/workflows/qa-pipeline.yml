name: Fanvue QA Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run tests every 6 hours
    - cron: '0 */6 * * *'

permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  e2e-tests:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        browser: [chromium, firefox, webkit]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        
    - name: Install dependencies
      run: |
        npm ci
        npx playwright install --with-deps ${{ matrix.browser }}
    
    - name: Run Playwright tests
      run: npx playwright test --project=${{ matrix.browser }}
      env:
        BROWSER: ${{ matrix.browser }}
    
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: test-results-${{ matrix.browser }}
        path: |
          test-results/
          playwright-report/
          screenshots/
    
    - name: Upload to TestRail
      if: always()
      run: |
        npm run testrail:upload
      env:
        TESTRAIL_URL: ${{ secrets.TESTRAIL_URL }}
        TESTRAIL_USERNAME: ${{ secrets.TESTRAIL_USERNAME }}
        TESTRAIL_API_KEY: ${{ secrets.TESTRAIL_API_KEY }}

  visual-regression-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
    
    - name: Install dependencies
      run: |
        npm ci
        npx playwright install --with-deps chromium firefox webkit
    
    - name: Download visual baselines
      id: download-baselines
      uses: actions/download-artifact@v3
      with:
        name: visual-baselines
        path: tests/visual/__screenshots__
      continue-on-error: true
    
    - name: Check if baselines exist
      id: check-baselines
      run: |
        if [ -d "tests/visual/__screenshots__" ] && [ "$(ls -A tests/visual/__screenshots__)" ]; then
          echo "has_baselines=true" >> $GITHUB_OUTPUT
          echo "Baselines found in tests/visual/__screenshots__"
          ls -la tests/visual/__screenshots__/
        else
          echo "has_baselines=false" >> $GITHUB_OUTPUT
          echo "No baselines found. Will create initial baselines."
          mkdir -p tests/visual/__screenshots__
        fi
    
    - name: Run visual regression tests
      id: visual-tests
      run: |
        if [ "${{ steps.check-baselines.outputs.has_baselines }}" = "false" ]; then
          echo "No baselines found. Creating initial baselines..."
          npm run test:visual:update
          echo "test_mode=baseline" >> $GITHUB_OUTPUT
        else
          echo "Baselines found. Running visual regression tests..."
          npm run test:visual || true
          echo "test_mode=comparison" >> $GITHUB_OUTPUT
        fi
      env:
        CI: true
    
    - name: Generate test results summary
      if: always()
      run: |
        if [ -f "visual-test-results.json" ]; then
          echo "Visual test results found"
          cat visual-test-results.json
        else
          echo "No visual test results file found"
        fi
    
    - name: Upload visual test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: visual-regression-results
        path: |
          visual-regression-report/
          test-results/
          tests/visual/__screenshots__/
          visual-test-results.json
    
    - name: Upload visual baselines
      if: (github.ref == 'refs/heads/main' || steps.check-baselines.outputs.has_baselines == 'false') && success()
      uses: actions/upload-artifact@v3
      with:
        name: visual-baselines
        path: tests/visual/__screenshots__/
        retention-days: 30
    
    - name: Comment PR with visual diff results  
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          const fs = require('fs');
          const path = require('path');
          const resultsPath = 'visual-test-results.json';
          
          // Get the test mode from the previous step output
          const testMode = '${{ steps.visual-tests.outputs.test_mode }}';
          
          let comment = '';
          
          if (testMode === 'baseline') {
            comment = `## üì∏ Visual Regression Baselines Created
            
            Initial baseline screenshots have been captured for visual regression testing.
            Future test runs will compare against these baselines.
            
            View the baseline images in the workflow artifacts.`;
          } else if (fs.existsSync(resultsPath)) {
            try {
              const results = JSON.parse(fs.readFileSync(resultsPath, 'utf8'));
              const failed = results.filter(r => !r.match);
              
              if (failed.length > 0) {
                comment = `## ‚ùå Visual Regression Test Failed
                
                Found ${failed.length} visual differences:
                
                ${failed.map(f => `- **${f.name}**: ${f.diffPercentage.toFixed(2)}% difference`).join('\n')}
                
                View the full report in the workflow artifacts.`;
              } else {
                comment = `## ‚úÖ Visual Regression Tests Passed
                
                All visual tests passed! No unexpected visual changes detected.`;
              }
            } catch (error) {
              console.error('Error parsing visual test results:', error);
              comment = `## ‚ö†Ô∏è Visual Test Results
              
              Visual tests completed but results could not be parsed.
              Check the workflow artifacts for details.`;
            }
          } else if (testMode === 'comparison') {
            comment = `## ‚ö†Ô∏è Visual Test Results
            
            Visual tests ran in comparison mode but no results file was generated.
            Check the workflow artifacts for details.`;
          }
          
          if (comment) {
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          }

  performance-tests:
    runs-on: ubuntu-latest
    needs: e2e-tests
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup k6
      run: |
        sudo gpg -k
        sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6
    
    - name: Run k6 load tests
      run: k6 run load-tests/fanvue-load-test.js
      continue-on-error: true
    
    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: k6-results
        path: k6-results.json
      continue-on-error: true

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Run security headers check
      run: |
        npm install -g @zaproxy/cli
        zap-cli quick-scan --self-contained https://www.fanvue.com
      continue-on-error: true

  report-to-sentry:
    runs-on: ubuntu-latest
    needs: [e2e-tests, visual-regression-tests, performance-tests]
    if: failure()
    
    steps:
    - name: Send failure notification to Sentry
      run: |
        curl -X POST \
          -H 'Authorization: Bearer ${{ secrets.SENTRY_AUTH_TOKEN }}' \
          -H 'Content-Type: application/json' \
          -d '{
            "message": "QA Pipeline failed for Fanvue.com",
            "level": "error",
            "tags": {
              "pipeline": "qa",
              "site": "fanvue.com",
              "branch": "${{ github.ref_name }}"
            }
          }' \
          https://sentry.io/api/0/projects/${{ secrets.SENTRY_ORG }}/fanvue/events/
      continue-on-error: true
